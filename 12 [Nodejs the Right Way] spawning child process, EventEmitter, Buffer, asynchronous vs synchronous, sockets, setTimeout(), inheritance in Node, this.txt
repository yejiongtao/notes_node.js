reading Node.js the Right Way, Practical, Server-Side JavaScript That Scales
	" Ruby is more than Rails, Python is more than Django, and Node.js is more than serving web content. "

1. basics
	Node.js couples JS with an event loop for quickly dispatching operations when events occur
		things other than your callbacks -like waiting for data from a file or a HTTP request- is handled by Node, in parallel
		(注意waiting是parallel的，读取已经在callback里面了，不是parallel)

	single threaded and highly parallel，理解：
		其实所谓多线程也都是排队，而且线程太多的话切换会花费很大
			所以一般线程数与CPU线程数相当为佳（一个线程跑在多个CPU线程上也没办法很好利用CPU的多线程）
		Node.js 就干脆单线程，利用async IO 把等待的时间都利用起来
		it's pretty common in Node development to spawn separate processes as a way of breaking up work

2. spawning a child process
	const spawn = require('child_process').spawn;
	var ls = spawn('ls', ['-l', 'mydir']);	// returns the child process
	ls.stdout.pipe(process.stdout);		// its stdin, stdout, stderr properties are Streams

3. capturing data from an EventEmitter
	EventEmitter provides a channel for events to be dispatched and listeners notified
		many objects in Node inherit from EventEmitter, such as Streams
		we can add listeners to those extended from EventEmitter
	e.g.
		var ls = require('child_process').spawn('ls');
		ls.stdout.on('data', function(chunk) {
			output += chunk.toString();
		});
		ls.on('close', function() {	// CHildProcess also extends EventEmitter
			// ...
		});

4. Buffer
	represents binary data
		is a blob of memory allocated by Node, outside of the JavaScript engine
	can't be resized and require encoding and decoding to convert to and from JavaScript strings
		toString() converts to a string using Node's default encoding (utf-8)
			this means copying the content into Node's heap, which can be slow
			so if you can, work with buffers directly, but strings are more convenient
		
5. asynchronous vs synchronous file-system manipulations
	in the initialization phase of a program, if something goes wrong, it's better to fail fast
		here is the only time you should consider synchronous file access
		you can use synchronous operations to avoid race conditions in this phase
			e.g. require() is designed synchronous
	in the operation phase, the program is on the event loop
		use asynchronous ones
		(actually, I think in some cases, you may use synchronous operations in this phase as well, to perform some necessary tasks)

6. networking with sockets
	TCP sockets
		server
			const net = require('net');
			const server = net.createServer(function(connection) {
				// called whenever other connects
				// connection is a Socket object
				connection.write('Hello');
				connection.on('close', function() {
					console.log('Subscriber disconnected.');
				});
				// Socket objects are both readable and writable
			});
			server.listen(5444, function() {
				// called when sucessfully bonded. can be omitted
			});
		
		use telnet to establish a connection
			telnet localhost 5432
			// to quit, ctrl + ], then quit

		client
			const client = require('net').connect({port: 5432});	// a Socket object
			client.on('data', function(data) {
				// ...
			});
			// you should also listen to 'end' and 'error' events
		
		message-boundary problem
			a big issue when using low-level sockets
				one message could be split, and multiple messages could arrive together
			one feasible approach
				add a end-of-message symbol, such as '\n'
				and then use a buffer to receive and re-construct messages

	Unix sockets
		a more efficient way for processes on the same computer to communicate
			but only work on Unix-like environments
			faster than TCP sockets because they don't require invoking network hardware

		code
			server.listen('/tmp/1.sock', function(){});
		use nc to estabilsh a connection
			nc is short for netcat
				a TCP/UDP socket utility program that also supports Unix sockets
			nc -U /tmp/1.sock
	
7. setTimeout()
	const timer = setTimeout(function(){}, 1000);
	clearTimeout(timer);
		// useful when there's a race condition between the operations in timer's funtion and others
		// e.g. clear it when a network connection is closed, to avoid using a closed connection in the function
	
	const interval = setInterval(function(){}, 1000);
		// called every 1000 miliseconds
	clearInterval(interval);

8. inheritance in Node
	e.g. class MyEmitter inherits from EventEmitter
		const events = require('events');
		const util = require('util');
		const MyEmitter = function() {
			events.EventEmitter.call(this);
			// call the EventEmitter constructor on 'this'
			// roughly equivalent to calling super() in other languages
		};
		util.inherits(MyEmitter, events.EventEmitter);
			// makes MyEmitter's prototypal parent object the EventEmitter prototype
		
		const emitter = new MyEmitter();
		emitter.on('mytype', function (data) {
			// register for a event type from emitter
			console.log('this is data: ' + data);
		});
		emitter.emit('mytype', 'hello');
		// emit a event manually

9. 'this' in JavaScript
	in js, the value of 'this' is assigned inside each function when it's invoked, at runtime
		it's not tightly bound to any particular object like in classical languages
		it's more like a special variable
	so we have to be careful about 'this' in js, especially when nested funtions are involved
		a good idea is to set a separate variable pointing to 'self' at the beginning, to guarantee we're referring to the correct object
			const self = this;
