0. node.js style function
	those with a callback function in the form of function(err, result)

1. async.waterfall()	串行有关联
	async.waterfall() executes a sequence of asynchronous functions
	takes two arguments
		an array of functions to execute sequentially
			the last argument of each function is a 'next' callback to pass result forward into the next function
		a summary function to call when everything is finished

	code
		async.waterfall([
		    function (done) {

			done(null, 'one');
		    },
		    function (onearg, done) {

			done(null, onearg + '| two');
		    },
		    function (twoarg, done) {

			done(null, twoarg + '| three');
		    }
		], function (error, result) {
		    console.log(result);
		})

2. async.parellel()	并行无关联
	// suitable for those parellel tasks with a final task should be executed after they are done
	var async = require('async');
	async.parallel({
	    one: function (done) {
		require('fs').readFile('1.txt', function(err, text)) {
			if(err)
				done(err);
			else
				done(null, text);
		}
	    },
	    two: function (done) {
		//处理逻辑
		done(null, 'tow');
	    },
	    three: function (done) {
		//处理逻辑
		done(null, 'three');
	    }
	}, function (error, result) {
	    console.log('one:', result.one);
	    console.log('two:', result.two);
	    console.log('three:', result.three);
	})

3. async.series()	串行无关联
	async.series({
	    one: function (done) {
		//处理逻辑
		done(null, 'one');
	    },
	    two: function (done) {
		//处理逻辑
		done(null, 'tow');
	    },
	    three: function (done) {
		//处理逻辑
		done(null, 'three');
	    }
	}, function (error, result) {
	    console.log('one:', result.one);
	    console.log('two:', result.two);
	    console.log('three:', result.three);
	    console.timeEnd('series');
	})
