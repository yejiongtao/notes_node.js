1. other web application frameworks
	Hapi.js
		a relatively small framework that has routing and middelware-like functionality
		a pretty mature framework that used by Mozilla, OpenTable and npm registry, etc
		probably Express's biggest competitor

	Meteor
		larger, full-stack framework
			running code on both client and server side
		Express is unopinionated about how you build your applications but Meteor has a strict structure

	Kraken
		techically just a middleware built otop Express 
		sets up a lot of your application
			from security defaults to bundled middleware
	
	Sails.js
		another framework built atop Express that adds databases, WebSocket integration, API generators, an asset pipeline, and more

	Connect
		only the middleware layer
			doesn't have routing or some additional APIs
		Express once used Connect for its middleware layer
			now Express middleware is completely compatible with Connect middleware
	
	outside the Node.js world
		Ruby's Sinatra, Python's Bottle and Flask, PHP
			similar to Express
		Python's Django, Ruby on Rails, ASP.NET, Java's Play
			more opinionated frameworks with lots of features

2. MEAN stack
	MongoDB (a javascript-friendly database)
	Express
	Angular (a front-end javascript framework)
	Node.js

3. helpful middlewares
	connect-ratelimit
		lets you limit connections to a certain number of requests per hour
		if someone's sending numerous requests to your server
			you can start giving them errors
	Helmet
		helps add HTTP headers to make your app safer against certain kinds of attacks
	response-time
		sends the X-Response-Time header so you can debug the performance of your app
	compression
		for compressing responses to save on bytes
	connect-assets
		compiles and minifies your CSS and js assets
		it will also work with CSS preprocessors like SASS, SCSS, LESS and Stylus

4. conveniences Express adds to Node.js
	res.redirect
	res.sendFile
	res.status
	res.send

	req.ip
	req.get		// gets HTTP headers

5. consolidate.js
	a library that wraps a ton of view engines to be compatible with Express
	e.g. to use Walrus with Express
		// after npm install walrus consolidate
		var engines = require('consolidate');
		app.set('view engines', 'wal');		
			// specifies .wal files as your default view file extension
		app.engine('wal', engines.walrus);
			// associates .wal files with the Walrus view engine
		app.set('views', path.resolve(__dirname, 'views'));

6. MongoDB
	a popular NoSQL database, with JavaScript used in its native shell
	MongoDB basics
		a database has several collections (a collection is like a table in SQL)
		a collection has several documents (a document is like a record in SQL)
		there's one document per thing, e.g. a user profile
			but documents don't have to have the same properties, even if they're in the same collection
		documents are BSON file, something like JSON
			they're translated into JS objects before using
		Mongo adds a unique _id property to every document

7. Mongoose
	creating a model
		// models/user.js
		var userSchema = mongoose.Schema({
			username: {type: String, required: true, unique: true},
			createdAt: {type: Date, default: Date.now},
			bio: String
		});
		// then you define some methods to use
		userSchema.methods.name = function() {
			return this.username;
		}

		// a pre-save action
		userSchema.pre("save", function(done) {
			// do some work, such as verifying the data you want to save is valid
			done();
		});

		var User = mogoose.model('User', userSchema);
		module.exports = User;

	using the model
		// in app.js
		mongoose.connect('mongodb://localhost:27017/test');

		// using it
		var User = require('./models/user');
		User.find()
			.sort({createdAt: 'descending'})
			.exec(function(err, users) {
				if(err) { return next(err); }
				// ...
			});
		
		User.findOne({ username: 'Tau' }, function(err, user) {});
			// if you provide a callback, then the query is executed immediately, instead of invoked by a exec()
		
		var newUser = new User({ username: 'Tau', password: 'p'});
		newUser.save();



