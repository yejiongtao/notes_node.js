1. crypto
	https://nodejs.org/dist/latest-v6.x/docs/api/crypto.html
	use it to cipher and decipher using aes-256-cbc
		in a stream way
			const crypto = require('crypto');
			const cipher = crypto.createCipher('aes-256-cbc', 'a password');

			var encrypted = '';
			cipher.on('readable', function () {
			    var data = cipher.read();
			if (data)
			    encrypted += data.toString('hex');	// a string in hex
			});
			cipher.on('end', function(){
			    console.log(encrypted);
			});

			cipher.write('some clear text data');
			cipher.end();


			const decipher = crypto.createDecipher('aes-256-cbc', 'a password');

			var decrypted = '';
			decipher.on('readable', function () {
			    var data = decipher.read('utf8');
			    if(data)
				decrypted += data.toString();
			});
			decipher.on('end', function(){
			    console.log(decrypted);
			});
			decipher.write(encrypted, 'hex');	// have to specify hex
			decipher.end();
		
		in a synchronous way
			var crypto = require('crypto');
			var cipher = crypto.createCipher('aes-256-cbc', 'this is key');
			var plain = 'Hello World!';

			var crypted = cipher.update(plain, 'utf8', 'hex');
			crypted += cipher.final('hex');
			console.log(typeof crypted);
			console.log('crypted: ' + crypted);
			crypted += 0;
			console.log('crypted: ' + crypted);

			var decipher = crypto.createDecipher('aes-256-cbc', 'this is key');
			var decrypted = decipher.update(crypted, 'hex', 'utf8');
			decrypted += decipher.final('utf8');
			console.log('decrypted: ' + decrypted);
	
	if fail to decrypt, will throw an error

2. __dirname
	the directory name of the current module
	should use this instead of relative path!
		because the relative path it relative to the location you call 'node'
	use path.resolve()
		require('path').resolve(__dirname, '../myFolder');
		// actually the reason using path.resolve() is to avoid using platform dependant path seperator '/' and '\'

3. datetime
	use Date to get the current datetime
		new Date()
		// but there's no much you can do with it, like formatting
	use module 'moment'
		moment().format()
		// now you can use it along with mysql's datetime type
			var now = moment().format('YYYY-MM-DD HH:mm:ss')
		// parse a datetime
			var then = moment('1995-09-09 12:01:01')
		// compare two times
			moment().isBefore(Moment|String|Number|Date|Array)

4. forever module
	a simple CLI tool for ensuring that a given node script runs forever
		module 'forever-monitor' runs in the code
	basic usage
		forever start 1.js
		forever stopall
		forever list
		// there will be a log file for each launched script, containing those would have been printed out to the console

5. log4js module
	vs debug module
		debug module cannot define the level of loggings, so it's only suitable for development
	to use	
		var conf = {
		    appenders: [
			{ type: 'console' },
			{
			    type: 'file',
			    filename: 'logs/verify.log',
			    category: 'verify',		// used to identify it
			    maxLogSize: 10240,	// max size of each file
			    backups: 10		// max number of files. will start to cover if all these files are filled
			}
		    ],
		    levels: {
			'[all]': 'ALL'		
			// verify: 'ERROR', then it only logs ERROR and FATAL
		    }
		};
		log4js.configure( conf, {reloadSecs: 300});	
			// will scan periodically and reload the configuration file if needed
			// but only work when the configuration file is json

		var verifyLogger = log4js.getLogger('verify');
		verifyLogger.info('hello');
		verifyLogger.warn('huh');
		verifyLogger.error('dead');
	
		// use to logger http logs
		app.use(log4js.connectLogger(verifyLogger));
		
		
