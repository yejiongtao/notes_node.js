1. storing sessions in Redis
	session
		data that's attached to a particular user
		Express keeps session data in memory
			but when you have multiple Node processes, the session data should be stored to a shared place
		
	enable sessions in Express
		app.use(require('cookie-parser')());
			// responsible for parsing incoming cookies from the client
		app.use(require('express-session')({ secret: 'unguessable' }));
			// stores the session data attached to the cookie
			// 'secret' is used to sign the session cookies to prevent tampering and spoofing
		
	Redis
		an extremely fast key/value store, with tunable durability
			which means you can keep it fast but risk losing data if the server crashes
				by default, it keeps data in memory and periodically writes it to disk
				(lossing session data means the users must log in again, which is no big deal)
			or you can sacrifice speed for greater durability guarantees
		
		to use
			install and start redis
			install redis and connect-redis module
			code
				redisClient = require('redis').createClient();
				RedisStore = require('connect-redis')(express);
				app.use(session({
					secret: 'this is key',
					store: new RedisStore({
						client: redisClient
					})
				}))

		handling errors
			connect-redis is tolerant of Redis errors
				which means it silently ignores it when Redis is unreachable
			to deal with it by yourself
				redisClient.on('error', function(err) {});

2. express-mysql-session
	store session data in mysql

3. static content and Bower
	app.use(express.static(__dirname + '/bower_components'));
		if Express can't find a particular route, it'll fall back to serving the static content

	Bower is a package manager for front-end code, like js libraries
		bower install --save bootstrap
		// it will be inside bower_components/
		// then you can reference it in html
	
	Bower vs npm
		actually many libraries such as bootstrap can be installed via both npm and Bower
		difference between them
			npm 支持嵌套依赖
				方便，但是可能会下载一些重复的东西
				在服务器中无所谓
			Bower 只支持扁平的依赖，嵌套的依赖由程序员自己解决
				适合前端库，比如要确保各种各样的插件都依赖同一个版本的jQuery

