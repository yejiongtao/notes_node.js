1. nodejs code assistance in WebStorm
	settings > Languages & Frameworks > Node.js and NPM > code assistance
	
2. node.js
	callback-style asynchronicity
		asynchronicity is infectious
			(every function that calls an asynchronous function will become asynchronous)
		error handling
			exceptions aren't automatically propagated to callbacks but rather passed to them as arguments
			so they have to be handled explicitly every time

	usage of some global variables
		process.exit(code)	// exit the node process
		process.argv		// get the command-line arguments
					// the actual arguments start at index 2
		the global scope object is called 'global' on Node, instead of 'window' in browsers

	modules
		pathnames
			"/", "./", "../"
			when a string doesn't look like a relative or absolute path
				it's assumed to refer to either a built-in module or a module installed in a node_modules directory

	installing with NPM
		NPM is an online repository of JS modules, many of which are specially written for Node
		e.g. npm install figlet	// figlet can convert text into ASCII drawings

	the file system module
		basic usage
			var fs = require("fs");

			// read a file
			// if you don't specify the encoding, a Buffer object will be returned instead of string
			fs.readFile('file.txt', 'utf8', function(error, text) {
				if(error) throw error;
				console.log(text);
			});
		// ATTENTION! for those function passed as an argument, the names of the arguments do not matter, only the order matter!

			// write to a file
			// if a string is given instead of Buffer, it will write to the file using its default encoding utf-8
		other usage
			readdir()	get the files in a directory
			stat()		retrieve information about a file
			rename()
			unlink()	remove a file
			readFileSync()	many of the functions come in both asynchronous and synchronous variants
			watch()		call the callback if the file changes

	the http module (https module is similar)
		server
			var http = require('http');
			var server = http.createServer(function(request, response) {
			    response.writeHead(200, {"Content-Type":"text/html"});
			    response.write("<h1>Hello</h1>");	// you can call this multiple times
			    response.end();
			});
			server.listen(8000);	// http://localhost:8000
		client
			var http = require("http");
			var request = http.request(
			    { hostname: 'localhost', path: '/', method: 'GET',
			    headers: {Accept: 'text/html'}},
			    function (response) {
				console.log(response.statusCode);
			    }
			);
			request.end();
	
	streams
		writable streams
			a widely used concept in Node interfaces
				http's request and response objects are writable or readable streams
			write()		can be passed to a string or a Buffer object
			end()		closes the stream
					and writes out some data if any argument is given
					// both write() and end() can also be passed to a callback function, which is called when the action is finished
			fs.createWriteStream() creates a stream that points to a file
					so that you can write the file one piece at a time

		readable streams
			reading from a stream is done using event handlers, rather than methods
			objects that emit events in Node have a method called 'on'
				(similar to addEventListenr())
				you give it an event name and then a function
				it will register that function to be called whenever the given event occurs
			readable streams have 'data' and 'end' events
				'data' is fired every time some data comes in
				'end' is fired whenever the stream is at its end
			(a file can be read as a readable stream using fs.createReadStream())
			e.g. in a http server
				http.createServer(function(request, response) {
				    response.writeHead(200, {"Content-Type": "text/plain"});
				    request.on('data', function (chunk) {
					// it will get a Buffer object
					response.write(chunk.toString().toUpperCase());
				    });
				    request.on('end', function() {
					response.end();
				    });
				}).listen(8000);

	the url module
		can be used to parse urls, etc
	
	the mime module (installed via npm)
		can determine the file type based on the extension and translate it into MIME type
	
3. curl
	a command-line tool, widely available on Unix-like systems, can be used to make HTTP requests

