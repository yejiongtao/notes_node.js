1. debugging
	Express use the debug module internally to log information
		about route matches, middleware functions in use, application mode, the flow of the request-response cycle
	unlike console.log, you don't have to comment out 'debug' logs in production code
		they are turned off by default
		and can be conditionally turned on by using the DEBUG environment variable
	to show the log
		DEBUG=express:* node index.js
		// DEBUG=express:router to see logs onlu from the router implementation

2. Express behind proxies
	when running an Express app behind a proxy, set the application variable 'trust proxy' to one of the followings
		(otherwise, it will incorrectly register the proxy's IP address as the client IP addrss)
		http://expressjs.com/en/guide/behind-proxies.html

3. database integration
	http://expressjs.com/en/guide/database-integration.html
	mysql
		// npm install mysql
		var mysql = require('mysql')
		var connection = mysql.createConnection({
		  host: 'localhost',
		  user: 'dbuser',
		  password: 's3kreee7'
		})

		connection.connect()

		connection.query('SELECT 1 + 1 AS solution', function (err, rows, fields) {
		  if (err) throw err

		  console.log('The solution is: ', rows[0].solution)
		})

		connection.end()
	
	with connection pool
		var pool = mysql.createPool({
			host: 'localhost',
			user: 'user',
			password: 'password',
			database: 'database',
			port: port
		});
		var query=function(sql, callback){  
		    pool.getConnection(function(err, conn){  
			if(err){  
			    callback(err,null,null);  
			}else{  
			    conn.query(sql, function(qerr, vals, fields){  
				//释放连接  
				conn.release();  
				//事件驱动回调  
				callback(qerr, vals, fields);  
			    });
			}  
		    });
		};
		module.exports = query;

		// then query('select 1 from 1', function(err, vals, fields) {
			// do something
		});

4. process managers
	to achieve the following tasks
		restart the app automatically if it crashes
		gain insights into runtime performance and resource consumption
		modify settings dynamically to improve performance
		control clustering

	the most popular process managers for Express and other Node.js applications
		StrongLoop Process Manager
		PM2
		Forever

	basic usage
		http://expressjs.com/en/advanced/pm.html

5. security
	http://expressjs.com/en/advanced/best-practice-security.html

6. uploading files using module 'multer'
	var upload = require('multer')({dest: 'uploads/'});
	router.post('/', upload.single('file1'), function (req, res, next) {
	    res.redirect('/upload');
	    // you can access the file via req.file
	    // until now, the file is saved
	    // but req.file.filename is a random-generated one
	    // the original name is req.file.originalName
	});
	// you can upload multiple files

	// jade
	form(method='post', enctype='multipart/form-data')
		input(type='file', name='file1')	// the name is necessary
		button(type='submit') upload
