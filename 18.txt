1. passport module
	authenticates requests through an extensible set of plugins known as strategies
		strategies can range from verifying username and password credentials,
			delegated authentication using OAuth (e.g. via Google, Facebook, Wechat, etc)
			or federated authentication using OpenID
	to use
		authenticate
			app.post('/login', 
			    passport.authenticate('local', {failureRedirect: '/login' }),
			    fucntion(req, res, next) {
			        // you enter here only when authentication succeeds
				// otherwise a 401 will be returned and no additional route handlers will be invoked
			        // req.user is the authenticated user
			    })

			you can also override the default behavior of the router
				app.post('/login', passport.authenticate('local', {
					successRedirect: '/', failureRedirect: '/login' }))

			in some cases you want to disable sessions, e.g. for RESTful APIs, you may want to verify every single call
				passport.authenticate('local', {session: false}))

		configure
			authentication strategies
				var passport = require('passport')
				  , LocalStrategy = require('passport-local').Strategy;

				passport.use(new LocalStrategy(
				  function(username, password, done) {
				    // look it up in the database
				    User.findOne({ username: username }, function (err, user) {
				      if (err) { return done(err); }
				      if (!user) {
					return done(null, false, { message: 'Incorrect username.' });	// the message is optional
				      }
				      if (!user.validPassword(password)) {
					return done(null, false, { message: 'Incorrect password.' });
				      }
				      return done(null, user);
				    });
				  }
				));

			application middleware
				// In a Connect or Express-based application, passport.initialize() middleware is required to initialize Passport
				app.use(cookieParser());
				app.use(express_session({
					secret: 'keyboard cat',
					resave: false,
					saveUninitialized: false,
					cookie:{maxAge:180*60*1000}}));
				app.use(passport.initialize());
				app.use(passport.session());

			sessions
				// in order to support login sessions, Passport will serialize and deserialize 'user' instances to and from the session
				passport.serializeUser(function(user, done) {
				  // you can serialize anything you want
				  done(null, user.id);
				});

				passport.deserializeUser(function(id, done) {
				  // retreive a user instance
				  User.findById(id, function(err, user) {
				    done(err, user);
				  });
				});

		passport-local module
			by default, LocalStrategy expects to find credentials in parameters named username and password
				<form action="/login" method="post">
				    <div>
					<label>Username:</label>
					<input type="text" name="username"/>
				    </div>
				    <div>
					<label>Password:</label>
					<input type="password" name="password"/>
				    </div>
				    <div>
					<input type="submit" value="Log In"/>
				    </div>
				</form>
		
		deal with sessions
			passport adds several methods to req
				logIn(user, options, callback)
				logOut()	// delete session
				isAuthenticated()
				isUnauthenticated()

